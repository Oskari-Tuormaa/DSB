%% Load og plot signal
clear;
close all;
clc;

load('ECG_noisy_signal.mat');

s = signal_QRS;
fs = f_sample;

% Remove DC:
dc = mean(s);
s = s - dc;

% Studér EKG og dokumentér nytte-frekvensområde (båndbredde)

% Varighed af signal
N = length(s);
Tlength = N*1/fs;

S = fft(s);

% Frekvens akse:
delta_f = fs/N;
f_axis = 0:delta_f:fs-delta_f;

logX = (20*log10(abs((1/N)*S(1:0.5*fs))));

% ***** Plots ***************************************************
figure(1); clf
semilogx(logX);
ylim([-50 25])
xlabel('Frekvens [Hz]');
ylabel('Magnitude [dB]');

figure(2)
plot(s)
xlabel('Samples')
ylabel('Amplitude')
title('Sample-plot af signalet')
% Her ser vi blot signalet tegnet direkte.

%% Højfrekvent - FIR - Lavpas
close all

f_lo = 150; % Cutoff frekvens
M_lo = 512; % Orden
f_lo_res = fs / M_lo; % Frekvensopløsning af filter

f_lo_bin = round(f_lo / f_lo_res); % Cutoff frekvens i bin

% Skab filterets overføringskarakteristik i frekvensdomænet.
% Da filtret er lavpas, sættes 1'er ind på hvert bin under
% cutoff frekvensen, og 0'er sættes ind på hvert bin
% over cutoff frekvensen.
H_lo = [ones([1 f_lo_bin]) zeros([1 M_lo/2 - f_lo_bin])];
stem(H_lo)

% Spejl filteret omkring nyquist, dvs. det sidste bin.
H_lo = [H_lo fliplr(H_lo)];
figure()
stem(H_lo)

% Brug ifft til at omregne filteret til tidsdomænet for at se
% impulsrespons
h_lo = fftshift(real(ifft(H_lo)));
figure()
plot(h_lo)
title("Impulsrespons")

hanning_w_lo = hanning(length(h_lo))';
h_lo = h_lo .* hanning_w_lo;

% Lav fft på impulsresponset for at finde den reele overførings-
% karakteristik.
N_lo_fft = fs; % Punkter i fft
f_lo_x = (0:N_lo_fft-1) * fs / N_lo_fft; % x-aksen

h_lo = abs(fft(h_lo, N_lo_fft));
figure()
plot(f_lo_x, 20*log10(h_lo))
title("Lavpas, Fc = 150 Hz, M = 512")
xlim([0 400])
ylim([-100 10])
xlabel("Frekvens [Hz]")
ylabel("Gain [dB]")

% Kør signalet gennem filteret så at sige
w_net = conv(s, h_lo./f_lo_bin);
figure()
plot(w_net)
hold on
plot(s)
legend(["Filtreret" "Original"])
hold off

%% Lavfrekvent - FIR - Højpas
close all

f_lo = 2; % Cutoff frekvens
M_lo = 2048; % Orden
f_lo_res = fs / M_lo; % Frekvensopløsning af filter

f_lo_bin = round(f_lo / f_lo_res) % Cutoff frekvens i bin

% Skab filterets overføringskarakteristik i frekvensdomænet.
% Da filtret er lavpas, sættes 1'er ind på hvert bin under
% cutoff frekvensen, og 0'er sættes ind på hvert bin
% over cutoff frekvensen.
H_lo = [zeros([1 f_lo_bin]) ones([1 M_lo/2 - f_lo_bin])];
stem(H_lo)

% Spejl filteret omkring nyquist, dvs. det sidste bin.
H_lo = [H_lo fliplr(H_lo)];
figure()
stem(H_lo)

% Brug ifft til at omregne filteret til tidsdomænet for at se
% impulsrespons
h_lo = fftshift(real(ifft(H_lo)));
figure()
plot(h_lo)
title("Impulsrespons")

% Lav fft på impulsresponset for at finde den reele overførings-
% karakteristik.
N_lo_fft = fs; % Punkter i fft
f_lo_x = (0:N_lo_fft-1) * fs / N_lo_fft; % x-aksen

h_lo = abs(fft(h_lo, N_lo_fft));
figure()
plot(f_lo_x, 20*log10(h_lo))
title("Højpas, Fc = 0.05 Hz, M = 512")
xlim([0 400])
%ylim([-100 10])
xlabel("Frekvens [Hz]")
ylabel("Gain [dB]")

% Kør signalet gennem filteret så at sige
w_net = conv(s, h_lo./f_lo_bin);
figure()
plot(w_net)
hold on
plot(s)
legend(["Filtreret" "Original"])
hold off

%% Netstøj - FIR - Båndstop
close all

f_net_hi = 55; % Cutoff frekvens
f_net_lo = 45;
M_net = 1024; % Orden
f_net_res = fs / M_net; % Frekvensopløsning af filter

f_net_bin_hi = round(f_net_hi / f_net_res) % Cutoff frekvens i bin
f_net_bin_lo = round(f_net_lo / f_net_res) % Cutoff frekvens i bin

% Skab filterets overføringskarakteristik i frekvensdomænet.
% Da filtret er lavpas, sættes 1'er ind på hvert bin under
% cutoff frekvensen, og 0'er sættes ind på hvert bin
% over cutoff frekvensen.
H_net = [ones([1 f_net_bin_lo]) zeros([1 f_net_bin_hi - f_net_bin_lo]) ones([1 M_net/2 - f_net_bin_hi])];
stem(H_net)

% Spejl filteret omkring nyquist, dvs. det sidste bin.
H_net = [H_net fliplr(H_net)];
figure()
stem(H_net)

% Brug ifft til at omregne filteret til tidsdomænet for at se
% impulsrespons
h_ = fftshift(real(ifft(H_net)));
figure()
plot(h_net)

% Lav fft på impulsresponset for at finde den reele overførings-
% karakteristik.
N_net_fft = fs; % Punkter i fft
f_net_x = (0:N_net_fft-1) * fs / N_net_fft; % x-aksen

h_net = abs(fft(h_net, N_net_fft));
figure()
plot(f_net_x, 20*log10(h_net))
title("Fc = 150 Hz, M = 512")
%xlim([0 400])
%ylim([-100 10])
xlabel("Frekvens [Hz]")
ylabel("Gain [dB]")

% Kør signalet gennem filteret så at sige
w_net = conv(s, h_net./f_net_bin);
figure()
plot(w_net)
hold on
plot(s)
legend(["Filtreret" "Original"])
hold off
